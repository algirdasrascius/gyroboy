package com.mydigiverse.scanner;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.HashSet;
import java.util.Set;

import org.junit.Test;

public class ScannerTest {

	@Test
	public void testProcess() {
		float[] data = {
				0.08f, 0.07f, 0.06f, 0.06f, 0.05f, 0.04f, 0.06f, 0.05f, 0.05f, 0.06f, 0.05f, 0.05f, 0.04f, 0.06f, 0.07f, 0.07f, 0.09f, 0.12f, 0.13f,
				0.16f, 0.19f, 0.2f, 0.24f, 0.24f, 0.28f, 0.27f, 0.28f, 0.29f, 0.26f, 0.27f, 0.23f, 0.23f, 0.2f, 0.19f, 0.17f, 0.14f, 0.14f, 0.14f,
				0.09f, 0.06f, 0.06f, 0.07f, 0.09f, 0.09f, 0.12f, 0.14f, 0.16f, 0.17f, 0.2f, 0.2f, 0.24f, 0.25f, 0.25f, 0.29f, 0.31f, 0.3f, 0.32f, 
				0.31f, 0.32f, 0.31f, 0.31f, 0.32f, 0.32f, 0.31f, 0.32f, 0.31f, 0.29f, 0.3f, 0.18f, 0.16f, 0.12f, 0.08f, 0.07f, 0.06f, 0.05f, 0.05f,
				0.05f, 0.05f, 0.05f, 0.04f, 0.04f, 0.04f, 0.05f, 0.05f, 0.06f, 0.07f, 0.09f, 0.1f, 0.15f, 0.15f, 0.18f, 0.2f, 0.22f, 0.24f, 0.26f,
				0.26f, 0.29f, 0.28f, 0.29f, 0.28f, 0.29f, 0.25f, 0.22f, 0.2f, 0.17f, 0.15f, 0.12f, 0.12f, 0.09f, 0.07f, 0.06f, 0.07f, 0.08f, 0.08f,
				0.13f, 0.16f, 0.17f, 0.2f, 0.22f, 0.22f, 0.25f, 0.27f, 0.28f, 0.31f, 0.32f, 0.33f, 0.33f, 0.32f, 0.33f, 0.32f, 0.32f, 0.32f, 0.34f,
				0.33f, 0.33f, 0.32f, 0.31f, 0.28f, 0.27f, 0.25f, 0.22f, 0.18f, 0.13f, 0.1f, 0.09f, 0.07f, 0.06f, 0.06f, 0.07f, 0.09f, 0.11f, 0.14f,
				0.17f, 0.19f, 0.19f, 0.23f, 0.25f, 0.27f, 0.29f, 0.3f, 0.29f, 0.26f, 0.26f, 0.23f, 0.21f, 0.19f, 0.18f, 0.17f, 0.14f, 0.12f, 0.11f,
				0.09f, 0.07f, 0.06f, 0.04f, 0.04f, 0.05f, 0.04f, 0.05f, 0.04f, 0.05f, 0.06f, 0.05f, 0.05f, 0.04f, 0.04f, 0.05f, 0.05f, 0.05f, 0.05f,
				0.04f, 0.05f, 0.05f, 0.05f, 0.04f, 0.04f, 0.05f, 0.05f, 0.04f, 0.05f, 0.05f, 0.05f, 0.05f, 0.05f, 0.05f, 0.04f, 0.05f, 0.05f, 0.05f,
				0.04f, 0.05f, 0.05f, 0.05f, 0.05f, 0.05f, 0.06f, 0.06f, 0.05f, 0.05f, 0.05f, 0.05f, 0.06f, 0.06f, 0.05f, 0.05f, 0.05f, 0.05f, 0.05f,
				0.05f, 0.05f, 0.05f, 0.05f, 0.05f, 0.05f, 0.05f, 0.06f, 0.06f, 0.05f, 0.06f, 0.06f, 0.06f, 0.07f, 0.08f, 0.09f, 0.12f, 0.12f, 0.17f,
				0.17f, 0.21f, 0.24f, 0.26f, 0.29f, 0.31f, 0.32f, 0.32f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.36f, 0.36f, 0.35f, 0.35f, 0.35f, 0.35f,
				0.35f, 0.35f, 0.36f, 0.35f, 0.36f, 0.36f, 0.35f, 0.35f, 0.36f, 0.36f, 0.35f, 0.36f, 0.36f, 0.35f, 0.36f, 0.35f, 0.37f, 0.36f, 0.36f,
				0.36f, 0.36f, 0.36f, 0.37f, 0.36f, 0.36f, 0.36f, 0.35f, 0.36f, 0.36f, 0.36f, 0.36f, 0.36f, 0.36f, 0.35f, 0.37f, 0.37f, 0.36f, 0.37f,
				0.36f, 0.36f, 0.36f, 0.37f, 0.36f, 0.36f, 0.37f, 0.37f, 0.36f, 0.36f, 0.36f, 0.36f, 0.36f, 0.37f, 0.37f, 0.36f, 0.36f, 0.36f, 0.37f,
				0.37f, 0.37f, 0.37f, 0.36f, 0.37f, 0.37f, 0.37f, 0.37f, 0.37f, 0.37f, 0.37f, 0.38f, 0.37f, 0.37f, 0.37f, 0.37f, 0.38f, 0.39f, 0.39f,
				0.39f, 0.38f, 0.38f, 0.39f, 0.22f, 0.18f, 0.17f, 0.17f, 0.14f, 0.14f, 0.11f, 0.11f, 0.11f, 0.05f, 0.05f, 0.04f, 0.03f, 0.01f, 0.01f,
				0.01f, 0.01f, 0.01f, 0.01f, 0.01f, 0.01f, 0.0f, 0.01f, 0.01f, 0.0f, 0.01f, 0.01f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
				0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.01f, 0.01f, 0.02f, 0.01f, 0.02f, 0.02f, 0.02f, 0.03f, 0.03f, 0.04f,
				0.05f, 0.04f, 0.05f, 0.05f, 0.05f, 0.06f, 0.06f, 0.06f, 0.06f, 0.06f, 0.07f, 0.07f, 0.07f, 0.07f, 0.07f, 0.08f, 0.08f, 0.08f, 0.08f,
				0.08f, 0.08f, 0.09f, 0.09f, 0.1f, 0.1f, 0.1f, 0.11f, 0.11f, 0.13f, 0.13f, 0.16f, 0.16f, 0.17f, 0.19f, 0.21f, 0.23f, 0.23f, 0.22f,
				0.22f, 0.21f, 0.23f, 0.23f, 0.22f, 0.22f, 0.22f, 0.23f, 0.27f, 0.29f, 0.33f, 0.32f, 0.32f, 0.31f, 0.3f, 0.32f, 0.29f, 0.3f, 0.31f,
				0.31f, 0.3f, 0.31f, 0.31f, 0.3f, 0.3f, 0.31f, 0.3f, 0.3f, 0.3f, 0.31f, 0.3f, 0.31f, 0.3f, 0.3f, 0.3f, 0.31f, 0.31f, 0.31f, 0.31f, 0.3f,
				0.3f, 0.31f, 0.3f, 0.3f, 0.3f, 0.31f, 0.3f, 0.3f, 0.31f, 0.3f, 0.31f, 0.3f, 0.31f, 0.31f, 0.3f, 0.32f, 0.32f, 0.31f, 0.31f, 0.31f,
				0.31f, 0.31f, 0.31f, 0.31f, 0.31f, 0.31f, 0.3f, 0.3f, 0.26f, 0.25f, 0.24f, 0.2f, 0.18f, 0.16f, 0.12f, 0.12f, 0.09f, 0.09f, 0.06f,
				0.04f, 0.04f, 0.04f, 0.03f, 0.04f, 0.04f, 0.04f, 0.03f, 0.04f, 0.03f, 0.03f, 0.04f, 0.03f, 0.03f, 0.04f, 0.04f, 0.03f, 0.03f, 0.03f,
				0.03f, 0.03f, 0.03f, 0.03f, 0.05f, 0.05f, 0.03f, 0.04f, 0.04f, 0.04f, 0.03f, 0.04f, 0.03f, 0.03f, 0.03f, 0.04f, 0.04f, 0.04f, 0.04f,
				0.05f, 0.04f, 0.04f, 0.05f, 0.05f, 0.03f, 0.05f, 0.05f, 0.05f, 0.05f, 0.04f, 0.04f, 0.04f, 0.04f, 0.04f, 0.05f, 0.04f, 0.04f, 0.04f,
				0.04f, 0.03f, 0.05f, 0.04f, 0.04f, 0.04f, 0.03f, 0.03f, 0.03f, 0.03f, 0.04f, 0.04f, 0.03f, 0.04f, 0.04f, 0.03f, 0.05f, 0.04f, 0.03f,
				0.04f, 0.04f, 0.04f, 0.04f, 0.04f, 0.05f, 0.04f, 0.05f, 0.04f, 0.05f, 0.05f, 0.05f, 0.05f, 0.05f, 0.05f, 0.05f, 0.04f, 0.05f, 0.05f,
				0.05f, 0.04f, 0.05f, 0.06f, 0.06f, 0.06f, 0.07f, 0.1f, 0.14f, 0.15f, 0.17f, 0.2f, 0.23f, 0.25f, 0.26f, 0.29f, 0.31f, 0.33f, 0.31f,
				0.31f, 0.31f, 0.3f, 0.28f, 0.17f, 0.11f, 0.11f, 0.08f, 0.08f, 0.06f, 0.07f, 0.1f, 0.1f, 0.12f, 0.13f, 0.15f, 0.19f, 0.21f, 0.25f, 0.25f,
				0.29f, 0.3f, 0.3f, 0.34f, 0.34f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.35f, 0.34f, 0.35f, 0.35f, 0.3f, 0.29f,
				0.28f, 0.24f, 0.21f, 0.2f, 0.19f, 0.16f, 0.16f, 0.11f, 0.1f, 0.08f, 0.07f, 0.05f, 0.06f, 0.06f, 0.08f, 0.12f, 0.13f, 0.16f, 0.19f,
				0.22f, 0.23f, 0.27f, 0.29f, 0.3f, 0.3f, 0.32f, 0.3f, 0.28f, 0.27f, 0.25f, 0.22f, 0.19f, 0.19f, 0.14f, 0.12f, 0.11f, 0.08f, 0.08f, 0.06f,
				0.05f, 0.04f, 0.04f, 0.04f, 0.04f, 0.03f, 0.04f, 0.03f, 0.03f, 0.04f, 0.03f, 0.03f, 0.04f, 0.04f, 0.04f, 0.04f, 0.07f, 0.1f, 0.11f,
				0.14f, 0.16f, 0.18f, 0.18f, 0.22f, 0.25f, 0.26f, 0.29f, 0.29f, 0.3f, 0.31f, 0.29f, 0.27f, 0.25f, 0.25f, 0.24f, 0.19f, 0.16f, 0.16f, 
				0.13f, 0.11f, 0.1f, 0.07f, 0.06f, 0.06f, 0.05f, 0.06f, 0.1f, 0.1f, 0.11f, 0.15f, 0.19f, 0.21f, 0.21f, 0.26f, 0.27f, 0.31f, 0.31f, 0.32f,
				0.33f, 0.34f, 0.34f, 0.34f, 0.34f, 0.33f, 0.34f, 0.34f, 0.35f, 0.35f, 0.34f, 0.34f, 0.33f, 0.32f, 0.32f, 0.28f, 0.28f, 0.27f, 0.23f,
				0.2f, 0.18f, 0.17f, 0.15f, 0.12f, 0.11f, 0.08f, 0.08f, 0.06f, 0.05f, 0.05f, 0.04f, 0.04f, 0.04f, 0.05f, 0.03f, 0.04f, 0.03f, 0.03f,
				0.03f, 0.05f, 0.04f, 0.04f, 0.05f, 0.05f, 0.07f, 0.08f, 0.09f, 0.12f, 0.11f, 0.15f, 0.18f, 0.2f, 0.2f, 0.23f, 0.25f, 0.27f, 0.27f,
				0.3f, 0.31f, 0.29f, 0.26f, 0.26f, 0.23f, 0.19f, 0.19f, 0.16f, 0.13f, 0.13f, 0.09f, 0.08f, 0.06f, 0.05f, 0.04f, 0.03f, 0.04f, 0.03f,
				0.03f, 0.04f, 0.04f, 0.03f, 0.03f, 0.04f, 0.03f, 0.03f, 0.03f, 0.03f, 0.03f, 0.04f, 0.04f, 0.04f, 0.03f, 0.04f, 0.04f, 0.03f, 0.03f,
				0.04f, 0.04f, 0.03f, 0.04f, 0.04f, 0.04f, 0.05f, 0.04f, 0.04f, 0.04f, 0.04f, 0.04f, 0.04f, 0.05f, 0.05f, 0.05f, 0.03f, 0.04f, 0.04f,
				0.04f, 0.04f, 0.05f, 0.04f, 0.04f, 0.03f, 0.05f, 0.04f, 0.04f, 0.03f, 0.04f, 0.04f, 0.03f, 0.04f, 0.04f, 0.05f, 0.04f, 0.05f, 0.04f,
				0.05f, 0.05f };
		
		Scanner scanner = new Scanner(); 
		Set<Integer> results = new HashSet<>();
		for (int i = 0; i < data.length; i++) {
			results.add(scanner.process(i, data[i]));
		}
		assertEquals(2, results.size());
		assertTrue(results.contains(-1));
		assertTrue(results.contains(0b0010010011));
	}

}
